# Excel2IDS
# Copyright (C) 2024 Artur Tomczak <artur.tomczak@buildingsmart.org>

import sys
import openpyxl
from ifctester import ids, reporter
from tqdm import tqdm

### settings:
SHEET_NAME = 'Requirements'
IFC_VERSION = "IFC4X3"  # TODO "IFC4X3_ADD2"
ID_COL = 'A'
# applicability:
NAME_ROW = 14
ENTITY_ROW = 5
PSET_CODE_ROW = 7
PROP_CODE_ROW = 8
PVAL_CODE_ROW = 9
# req
PSET_COL = 'C'
PROP_COL = 'D'
PVAL_COL = 'E'
PVAL_PATTERN_COL = 'F'
URI_COL = 'G'
DTYPE_COL = 'H'


def excel2ids(excel_path):
    # create new IDS
    new_ids = ids.Ids(
        title="This is an IDS experiment",
        author="technical@buildingsmart.org",
        version="0.1",
        description="This IDS was generated by a script based on the spreadsheet input.",
        date="2024-04-29",
        purpose="Experiment",
        milestone="Handover",
        )

    # parse Excel file
    workbook  = openpyxl.load_workbook(excel_path)
    sheet = workbook[SHEET_NAME]
    # Define the starting cell of the assignment table
    start_row = sheet[START_CELL].row
    start_col = sheet[START_CELL].column
    if END_CELL:
        end_row = sheet[END_CELL].row+1
        end_col = sheet[END_CELL].column+1
    else:
        end_row = sheet.max_row + 1
        end_col = sheet.max_column + 1
    
    for col in tqdm(range(start_col, end_col)):

        column_letter = openpyxl.utils.get_column_letter(col)
        
        ### add new specification
        new_spec = ids.Specification(
            ifcVersion=IFC_VERSION,
            # identifier=str(sheet[f'{ID_COL}{row}'].value.strip()),
            name=f"All {sheet[f'{column_letter}{NAME_ROW}'].value.strip()} need certain properties.",
            )

        ### add applicability
        entity_cell = sheet[f'{column_letter}{ENTITY_ROW}'].value
        if entity_cell:
            if '.' in entity_cell:
                entity = ids.Entity(name=entity_cell.split('.')[0].upper(), predefinedType=entity_cell.split('.')[1].upper())
            else: 
                entity = ids.Entity(name=split_multiline(entity_cell.upper(), patterns=False))
            new_spec.applicability.append(entity)
        if sheet[f'{column_letter}{PROP_CODE_ROW}'].value:
            property = ids.Property(
                propertySet=sheet[f'{column_letter}{PSET_CODE_ROW}'].value.strip(), 
                baseName=sheet[f'{column_letter}{PROP_CODE_ROW}'].value.strip(),
                cardinality="required", # TODO should be optional
                dataType='IFCLABEL',
                )
            if sheet[f'{column_letter}{PVAL_CODE_ROW}'].value:
                # property.value = ids.Restriction(options={"pattern": sheet[f'{column_letter}{PVAL_CODE_ROW}'].value.strip()})
                property.value = split_multiline(sheet[f'{column_letter}{PVAL_CODE_ROW}'].value.strip(), patterns=True)    
                property.instructions=f"All objects with code like: '{sheet[f'{column_letter}{PVAL_CODE_ROW}'].value.strip()}'"
            new_spec.applicability.append(property)
        # TODO add classification
        # TODO add material

        for row in range(start_row, end_row):
            cell_value = sheet.cell(row=row, column=col).value
            if cell_value in ['X','x']:                
                ### add requirement(s)
                if sheet[f'{PROP_COL}{row}'].value:
                    property = ids.Property(
                    propertySet=sheet[f'{PSET_COL}{row}'].value.strip(), 
                    baseName=sheet[f'{PROP_COL}{row}'].value.strip(),
                    dataType=sheet[f'{DTYPE_COL}{row}'].value.strip().upper(),
                    cardinality="required"
                    )
                    if sheet[f'{PVAL_COL}{row}'].value:
                        property.value = sheet[f'{PVAL_COL}{row}'].value.strip()
                    elif sheet[f'{PVAL_PATTERN_COL}{row}'].value:
                        property.value = ids.Restriction(options={"pattern": sheet[f'{PVAL_PATTERN_COL}{row}'].value})
                    if sheet[f'{URI_COL}{row}'].value:
                        property.uri = sheet[f'{URI_COL}{row}'].value.strip()
                    new_spec.requirements.append(property)
                # TODO add classifications
                # TODO add material
                # TODO add entity/predefined type
                # ids.Entity(name=sheet[f'{column_letter}{ROW_IFC}'].value.upper())

            elif cell_value:
                # assuming if a value is not 'x' it is list of possible entities
                if '.' in cell_value:
                    entity = ids.Entity(name=cell_value.split('.')[0].upper(), predefinedType=cell_value.split('.')[1].upper())
                else:
                    entity = ids.Entity(name=split_multiline(cell_value.upper(), patterns=False))
                new_spec.requirements.append(entity)
                
        new_ids.specifications.append(new_spec)

    # Close the workbook
    workbook.close()

    ### Save such IDS to file
    ids_path = excel_path.replace('.xlsx','.ids')
    new_ids.to_xml(ids_path)
    print(f'\033[92mSuccess! The IDS file has been saved to {ids_path}\033[0m')


def split_multiline(cell_value, patterns=False):
    # if there are multiple lines in a single cell, split it into enumeration of literal values or patterns
    if '\n' in cell_value:      
        if not patterns:
            cell_value = ids.Restriction(options={"enumeration": cell_value.split('\n')})
        else:
            raise Exception("the tool doesn't support multiline patterns")
            # ps = []
            # for p in cell_value.split('\n'):
            #     ps.append(ids.Restriction(options={"pattern": p}))
            # cell_value = ids.Restriction(options={"enumeration": ps})
    else:
        if patterns:
            ids.Restriction(options={"pattern": cell_value})    
    return cell_value


if __name__ == "__main__": 
    file_path = input("\nPlease enter the path to the Excel spreadsheet: ")
    if file_path[0] == '"':
        file_path = file_path[1:]
    if file_path[-1] == '"':
        file_path = file_path[:-1]
    try:
        with open(file_path, 'r', encoding="utf-8") as file:
            content = file.read()
    except FileNotFoundError:
        print("The file was not found. Please check the path and try again.")
    except Exception as e:
        print(f"An error occurred: {e}")

    START_CELL = input("\nPlease enter the name of the first cell (top-left) of the assignment table (or hit enter to use default: L15): ")  # 'L15'
    if not START_CELL:
        START_CELL = 'L15'
    END_CELL = input("\nPlease enter the name of the last cell (bottom-right) of the assignment table (or hit enter to use default: AS54): ")  # 'AS54'        # or leave empty for whole table
    if not END_CELL:
        END_CELL = 'AS54'

    excel2ids(file_path)

    input("Press any button to close the program.")
